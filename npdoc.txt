# np.arange & np.linspace
当参数有float类型时, np.linspace更准确


# 展示所有
np.set_printoptions(threshold=sys.maxsize


# 乘法
*: elementwise, A * B
@或np.dot: 矩阵乘, A @ B ; A.dot(B)


Some operations, such as += and *=, 会修改已经原数组
=====
a = np.ones((2,3), dtype=int)
b = np.random.random((2,3))

b += a  # 可以
a += b  # 不可以, b is not automatically converted to integer type
=====


np.all: perform a logical AND
np.any: perform a logical OR
例1:
np.all([1.0, np.nan])  # Not a Number (NaN), positive infinity and negative infinity evaluate to True because these are not equal to zero.
例2:
a = np.array([[[True, True],
               [True, True]],

              [[True, True],
               [True, False]],

              [[True, True],
               [True, True]]])
print(np.all(a, axis=(0, 1)))  # axis的参数为tuple of ints时
例3:
b = np.array([False, False])
c = np.all(a, axis=(0, 1), out=b)  # out参数保存输出, It must have the same shape as the expected output
print(b, c)  # b更新了, 并且b、c的id相同


# np.apply_along_axis & np.apply_over_axes
np.apply_along_axis(func1d, axis, arr, *args, **kwargs):  # 执行func1d函数, 参数为arr的1-D切片
Execute `func1d(a, *args)` where `func1d` operates on 1-D arrays and `a` is a 1-D slice of `arr` along `axis`.
例1:
def my_func(a):
    return (a[0] + a[-1]) / 2
b = np.array([[1,2,3], [4,5,6], [7,8,9]])
np.apply_along_axis(my_func, 0, b)
np.apply_along_axis(my_func, 1, b)
****

np.apply_over_axes(func, a, axes):
例1:
b = np.array([[[0,  1,  2,  3],
               [4,  5,  6,  7],
               [8,  9, 10, 11]],
              [[12, 13, 14, 15],
               [16, 17, 18, 19],
               [20, 21, 22, 23]]])

print(np.apply_over_axes(np.sum, b, axes=(0, 2)))  # 相当于`np.sum(a, axis=(0,2), keepdims=True)`
=====
注意区分: np.apply_along_axis的func参数是1-D数组, np.apply_over_axes的func可能是n-D数组


# np.sum
例1:
b = np.array([[[0,  1,  2,  3],
               [4,  5,  6,  7],
               [8,  9, 10, 11]],
              [[12, 13, 14, 15],
               [16, 17, 18, 19],
               [20, 21, 22, 23]]])

print(np.sum(b, axis=(0, 2)))
# [ 60  92 124]
print(np.sum(b, axis=(0, 2), keepdims=True))  # 求不同维度的和; 保持维度个数
# [[[ 60]
#   [ 92]
#   [124]]]


# np.argmax & np.argmin & np.unravel_index
np.argmax, 返回索引
By default, the index is into the flattened array, otherwise along the specified axis.
例1:
a = np.arange(6).reshape(2, 3)
print(np.argmax(a))  # 5, 
print(np.argmax(a, axis=1))
print(np.unravel_index(np.argmax(a, axis=None), dims=a.shape))  # Converts a flat index or array of flat indices into a tuple of coordinate arrays.
例2:
print(np.unravel_index([22, 41, 37], (7,6)))  # 参数为array时, 逐个处理
# print(np.unravel_index(22, (7,6)))  # (3, 4), 二维时, 恰好与除数、余数对应
# print(np.unravel_index(41, (7,6)))  # (6, 5)
# print(np.unravel_index(37, (7,6)))  # (6, 1)
# 结果: (array([3, 6, 6], dtype=int64), array([4, 5, 1], dtype=int64))


# np.amax & np.amin & np.nanmax & np.nanmin
By default, flattened input is used.
例1:
print(np.max(a, axis=(0,1)))  # axis的值可以为tuple of ints
区别: np.argmax/np.argmin的axis只能为int, 不能为tuple of ints, 但np.amax/np.amin可以
例2:
b = np.arange(5, dtype=float)
b[2] = np.NaN
print(np.amax(b))  # 如果有NaN, 那么最大值为NaN, 可以用np.nanmax排除NaN
print(np.nanmax(b))
例3:
print(np.max([[-50], [10]], axis=-1, initial=9))  # [ 9 10], 貌似是保底的
print(np.min([[-50], [10]], axis=-1, initial=9))  # [-50  9]
例4:
Notice that the initial value is used as one of the elements for which the maximum is determined(意思可能是该参数作为一个元素参与运算), unlike for the default argument Python's max function, which is only used for empty iterables.
print(np.max([5], initial=6))  # 6
print(max([5], default=6))     # 5


# np.maximum & np.minimum
两个array之间的比较
If one of the elements being compared is a NaN, then that element is returned. 
If both elements are NaNs then the first is returned.

maximum(x1, x2, *args, **kwargs):
例1:
>>> np.maximum([2, 3, 4], [1, 5, 2])
array([2, 5, 4])

>>> np.maximum(np.eye(2), [0.5, 2]) # broadcasting
array([[ 1. ,  2. ],
	   [ 0.5,  2. ]])

>>> np.maximum([np.nan, 0, np.nan], [0, np.nan, np.nan])
array([ NaN,  NaN,  NaN])
>>> np.maximum(np.Inf, 1)
inf

minimum(x1, x2, *args, **kwargs):
例1:
>>> np.minimum([np.nan, 0, np.nan],[0, np.nan, np.nan])
array([ NaN,  NaN,  NaN])
>>> np.minimum(-np.Inf, 1)
-inf

老人言: Don't use `amax` for element-wise comparison of 2 arrays; 
        when ``a.shape[0]`` is 2, ``maximum(a[0], a[1])`` is faster than ``amax(a, axis=0)``.

小结:
    amin :
        The minimum value of an array along a given axis, propagating any NaNs.
    nanmax :
        The maximum value of an array along a given axis, ignoring any NaNs.
	
    maximum :
        Element-wise maximum of two arrays, propagating any NaNs.
    fmax :
        Element-wise maximum of two arrays, ignoring any NaNs.
	
    argmax :
        Return the indices of the maximum values.


# np.argsort & np.sort & ndarray.sort & np.lexsort & np.searchsorted
argsort(a, axis=-1, kind='quicksort', order=None):
默认按最后一个axis排序,
例1:
x = np.array([[0, 3], [2, 2]])
y = np.argsort(x, axis=None)
print(y)  # [0 2 3 1]
ind = np.unravel_index(np.argsort(x, axis=None), dims=x.shape)
print(ind)
print(x[ind])  # same as np.sort(x, axis=None)
例2:
参数order, 按字段排序
>>> dtype = [('Name', 'S10'), ('Height', float), ('Age', int)]
>>> values = [('Li', 1.8, 41), ('Wang', 1.9, 38),('Duan', 1.7, 38)]
>>> a = np.array(values, dtype=dtype)
>>> np.sort(a, order='Height')  # 按照属性Height进行排序,此时参数为字符串
array([('Duan', 1.7, 38), ('Li', 1.8, 41),('Wang', 1.9, 38)],
      dtype=[('Name', '|S10'), ('Height', '<f8'), ('Age', '<i4')])
>>> np.sort(a, order=['Age', 'Height']) 
# 先按照属性Age排序,如果Age相等，再按照Height排序，此时参数为列表
array([('Duan', 1.7, 38), ('Wang', 1.9, 38),('Li', 1.8, 41)],
      dtype=[('Name', '|S10'), ('Height', '<f8'), ('Age', '<i4')])
*****
sort(a, axis=-1, kind='quicksort', order=None):
All the sort algorithms make temporary copies of the data when sorting along any but the last axis.  
Consequently, sorting along the last axis is faster and uses less space than sorting along any other axis.
例1:
dtype = [('name', 'S10'), ('height', float), ('age', int)]  # '|S10', '<f8', '<i4'
values = [('Arthur', 1.8, 41), ('Lancelot', 1.9, 38), ('Galahad', 1.7, 38)]
a = np.array(values, dtype=dtype)
print(np.sort(a, order='height'))
print(np.sort(a, order=['age', 'height']))  # Sort by age, then height if ages are equal
*****
lexsort(keys, axis=-1):
lexically排序,
returns an array of integer indices.
The last key in the sequence is used for the primary sort order, the second-to-last key for the secondary sort order, and so on.
The keys argument must be a sequence of objects that can be converted to arrays of the same shape.
例1:
surnames = ('Hertz', 'Galilei', 'Hertz')
first_names = ('Heinrich', 'Galileo', 'Gustav')
ind = np.lexsort((first_names, surnames))  # first by surname, then by name.
print(ind)  # [1 2 0]
*****
searchsorted(a, v, side='left', sorter=None):
a : 1-D array_like
    If `sorter` is None, then it must be sorted in ascending order, otherwise `sorter` must be an array of indices that sort it.(typically the result of argsort.)
v : array_like  # 单个数值也行
side : {'left': ``a[i-1] < v <= a[i]``, 'right': ``a[i-1] <= v < a[i]``}  确定放在相等值的左边还是右边
例1:
>>> np.searchsorted([1,2,3,4,5], 3)
2
>>> np.searchsorted([1,2,3,4,5], 3, side='right')
3
print(np.searchsorted([1,2,3,4,5], [-10, 10, 2, 3]))  # 逐个处理      [0 5 1 2] 放在相等值的最左边
print(np.searchsorted([1,2,3,4,5], [-10, 10, 2, 3], side='right'))  # [0 5 2 3] 放在相等值的最右边


小结:
	ndarray.sort : In-place sort.
	np.sort      : Return a sorted copy of an array.


# np.average & np.mean
average(a, axis=None, weights=None, returned=False):
weights: The weights array can either be 1-D(in which case its length must be the size of `a` along the given axis) or of the same shape as `a`.
returned: If `True`, the tuple (`average`, `sum_of_weights`) is returned, otherwise only the average is returned. If `weights=None`, `sum_of_weights` is equivalent to the number of elements over which the average is taken.
返回值: The return type is `Float` if `a` is of integer type, otherwise it is of the same type as `a`. `sum_of_weights` is of the same type as `average`.
例1:
>>> data = np.arange(6).reshape((3,2))
>>> data
array([[0, 1],
	   [2, 3],
	   [4, 5]])
>>> np.average(data, axis=1, weights=[1./4, 3./4])  # 没问题
>>> np.average(data, weights=[1./4, 3./4])          # 报错
Traceback (most recent call last):
...
TypeError: Axis must be specified when shapes of a and weights differ.
*****
mean(a, axis=None, dtype=None, out=None, keepdims=np._NoValue):
dtype: Type to use in computing the mean. `float64` intermediate and return values are used for integer inputs.
       Note that for floating-point input, the mean is computed using the same precision the input has. Depending on the input data, this can cause the results to be inaccurate, especially for `float32` (see example below). Specifying a higher-precision accumulator using the `dtype` keyword can alleviate this issue.
例1:
In single precision, `mean` can be inaccurate:
>>> a = np.zeros((2, 512*512), dtype=np.float32)
>>> a[0, :] = 1.0
>>> a[1, :] = 0.1
>>> np.mean(a)
0.54999924
Computing the mean in float64 is more accurate:
>>> np.mean(a, dtype=np.float64)
0.55000000074505806


# np.bincount & np.digitize & np.searchsorted
np.bincount
bincount(x, weights=None, minlength=0):
每个element出现的次数, 然后用索引表示出来
x: 1 dimension, nonnegative ints
weights: the same shape as `x`. 
         if a value ``n`` is found at position ``i``, ``out[n] += weight[i]`` instead of ``out[n] += 1``.
minlength: If `minlength` is specified, there will be at least this number of bins in the output array
返回值: The length of `out` is equal to ``np.amax(x)+1``.
例1:
x = np.array([0, 1, 1, 3, 2, 1, 7, 23])
print(np.bincount(x))
# count[]
# count[0] = 1
# count[1] = 3
# count[3] = 1
# count[2] = 1
# count[7] = 1
# count[23] = 1
# 结果: [1 3 1 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]
例2:
w = np.array([0.3, 0.5, 0.2, 0.7, 1., -0.6]) # weights
x = np.array([  0,   1,   1,   2,  2, 2])
print(np.bincount(x,  weights=w))  # [0.3 0.7 1.1]
# count = [0] = 0.3
# count = [1] = 0.7
# count = [2] = 1.1
*****
digitize(x, bins, right=False):
Return the indices of the bins to which each value in input array belongs.
x: 明确指出复数会报错
bins: It has to be 1-dimensional and monotonic.
right: Indicating whether the intervals include the right or the left bin edge.
	=========  =============  ============================
	`right`    order of bins  returned index `i` satisfies
	=========  =============  ============================
	``False``  increasing     ``bins[i-1] <= x < bins[i]``  右边是否是闭区间
	``True``   increasing     ``bins[i-1] < x <= bins[i]``  右边是否是闭区间, 与np.searchsorted的side恰好相反
	``False``  decreasing     ``bins[i] <= x < bins[i-1]``
	``True``   decreasing     ``bins[i] < x <= bins[i-1]``
	=========  =============  ============================
返回值: same shape as `x`.
        If values in `x` are beyond the bounds of `bins`, 0 or ``len(bins)`` is returned as appropriate.
例1:
For monotonically _increasing_ `bins`, the following are equivalent::
	np.digitize(x, bins, right=True)  # 与np.searchsorted的side恰好相反
	np.searchsorted(bins, x, side='left')
x = np.array([0.2, 6.4, 3.0, 1.6])
bins = np.array([0.0, 1.0, 2.5, 4.0, 10.0])
inds = np.digitize(x, bins)
print(inds)  # [1 4 3 2]
例2:
>>> x = np.array([1.2, 10.0, 12.4, 15.5, 20.])
>>> bins = np.array([0, 5, 10, 15, 20])
>>> np.digitize(x,bins,right=True)
array([1, 2, 3, 4, 4])
>>> np.digitize(x,bins,right=False)
array([1, 3, 3, 4, 5])


# np.unique
unique(ar, return_index=False, return_inverse=False, return_counts=False, axis=None):
Find the unique elements of an array.  # 即去重
return_index: If True, also return the indices of `ar`
return_inverse: If True, also return the indices of the unique array that can be used to reconstruct `ar`.
return_counts: If True, also return the number of times each unique item appears in `ar`.
Returns the sorted unique elements of an array.
Unless `axis` is specified, this will be flattened if it is not already 1-D.
例1:
>>> np.unique([1, 1, 2, 2, 3, 3])
array([1, 2, 3])
>>> a = np.array([[1, 1], [2, 3]])
>>> np.unique(a)
array([1, 2, 3])

Return the unique rows of a 2D array
>>> a = np.array([[1, 0, 0], 
                  [1, 0, 0], 
				  [2, 3, 4]])
>>> np.unique(a, axis=0)
array([[1, 0, 0], [2, 3, 4]])

Return the indices of the original array that give the unique values:
>>> a = np.array(['a', 'b', 'b', 'c', 'a'])
>>> u, indices = np.unique(a, return_index=True)
>>> u
array(['a', 'b', 'c'],
	   dtype='|S1')
>>> indices
array([0, 1, 3])
>>> a[indices]
array(['a', 'b', 'c'],
	   dtype='|S1')

Reconstruct the input array from the unique values:
>>> a = np.array([1, 2, 6, 4, 2, 3, 2])
>>> u, indices = np.unique(a, return_inverse=True)
>>> u
array([1, 2, 3, 4, 6])
>>> indices
array([0, 1, 4, 3, 1, 2, 1])  # shape same as ``a``
>>> u[indices]
array([1, 2, 6, 4, 2, 3, 2])


# np.ceil & np.floor & np.trunc
ceil(x, *args, **kwargs):
例1:
>>> a = np.array([-1.7, -1.5, -0.2, 0.2, 1.5, 1.7, 2.0])
>>> np.ceil(a)
array([-1., -1., -0.,  1.,  2.,  2.,  2.])
*****
floor(x, *args, **kwargs):	
>>> a = np.array([-1.7, -1.5, -0.2, 0.2, 1.5, 1.7, 2.0])
>>> np.floor(a)
array([-2., -2., -1.,  0.,  1.,  1.,  2.])
*****
trunc(x, *args, **kwargs):
截断值, 舍弃分数部分, 特点是离0点更近, 
>>> a = np.array([-1.7, -1.5, -0.2, 0.2, 1.5, 1.7, 2.0])
>>> np.trunc(a)
array([-1., -1., -0.,  0.,  1.,  1.,  2.])


# np.rint & np.around & np.fix
rint(x, *args, **kwargs):
四舍五入到整型
>>> a = np.array([-1.7, -1.5, -0.2, 0.2, 1.5, 1.7, 2.0])  # 负数四舍五入: 先取正值, 四舍五入之后加负号
>>> np.rint(a)
array([-2., -2., -0.,  0.,  2.,  2.,  2.])
*****
around(a, decimals=0, out=None):
四舍五入
For values exactly halfway between rounded decimal values, NumPy rounds to the nearest even value(偶数). 
Thus 1.5 and 2.5 round to 2.0, -0.5 and 0.5 round to 0.0, etc.
例1:
>>> np.around([0.37, 1.64])  # 默认结果为整型
array([ 0.,  2.])
>>> np.around([0.37, 1.64], decimals=1)
array([ 0.4,  1.6])
>>> np.around([.5, 1.5, 2.5, 3.5, 4.5]) # rounds to nearest even value
array([ 0.,  2.,  2.,  4.,  4.])
>>> np.around([1,2,3,11], decimals=1) # ndarray of ints is returned
array([ 1,  2,  3, 11])
例2:
If
decimals is negative, it specifies the number of positions to the left of the decimal point.
只看英语还真不知道它说的啥, 指定小数点左边的position数, 
print(np.around([1023, 2364, 365, 375, 11], decimals=-1))  # [1020 2360  360  380   10]
*****
fix(x, out=None):
Round to nearest integer towards zero.
The rounded values are returned as floats.
例1:
>>> np.fix(3.14)
3.0
>>> np.fix(3)
3.0
>>> np.fix([2.1, 2.9, -2.1, -2.9])
array([ 2.,  2., -2., -2.])

貌似np.fix与np.trunc没多大区别...


# np.clip
clip(a, a_min, a_max, out=None):
Given an interval, values outside the interval are clipped to the interval edges. For example, if an interval of ``[0, 1]`` is specified, values smaller than 0 become 0, and values larger than 1 become 1.
a_min : scalar or array_like or `None`
a_max : scalar or array_like or `None`
If `a_min` or `a_max` are array_like, then the three arrays will be broadcasted to match their shapes.
例1:
>>> a = np.arange(10)
>>> a
array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
>>> np.clip(a, [3, 4, 1, 1, 1, 4, 4, 4, 4, 4], 8)  # 参数为数组时, 逐个对应
array([3, 4, 2, 3, 4, 5, 6, 7, 8, 8])


# np.eye & np.diag & np.identity & np.diagonal & np.diagflat & np.trace
eye(N, M=None, k=0, dtype=float, order='C'):
Return a 2-D array with ones on the diagonal and zeros elsewhere.
例1:
print(np.eye(4, k=2))
# [[0. 0. 1. 0.]
#  [0. 0. 0. 1.]
#  [0. 0. 0. 0.]
#  [0. 0. 0. 0.]]
*****
diag(v, k=0):
调用np.diagonal: return diagonal(v, k)
v: If `v` is a 2-D array, return a copy of its `k`-th diagonal.
   If `v` is a 1-D array, return a 2-D array with `v` on the `k`-th diagonal.
例1:
>>> x = np.arange(9).reshape((3,3))
>>> x
array([[0, 1, 2],
	   [3, 4, 5],
	   [6, 7, 8]])
>>> np.diag(x)
array([0, 4, 8])
>>> np.diag(np.diag(x))
array([[0, 0, 0],
	   [0, 4, 0],
	   [0, 0, 8]])
*****
identity(n, dtype=None):
调用np.eye: eye(n, dtype=dtype)
Return the identity array.  The identity array is a square array with ones on the main diagonal.(其他为0)
dtype: Defaults to ``float``.
例1:
>>> np.identity(3)
array([[ 1.,  0.,  0.],
	   [ 0.,  1.,  0.],
	   [ 0.,  0.,  1.]])
*****
diagonal(a, offset=0, axis1=0, axis2=1):
Return specified diagonals. ``a[i, i+offset]``
If `a` has more than two dimensions, then the axes specified by `axis1` and `axis2`.
The shape of the resulting array can be determined by removing `axis1` and `axis2` and appending an index to the right equal to the size of the resulting diagonals.
版本问题: use ``np.diagonal(a).copy()`` instead of just ``np.diagonal(a)``.
例1:
A 3-D example:
>>> a = np.arange(8).reshape(2,2,2); a
array([[[0, 1],
		[2, 3]],
	   [[4, 5],
		[6, 7]]])
>>> a.diagonal(0, # Main diagonals of two arrays created by skipping
...            0, # across the outer(left)-most axis last and
...            1) # the "middle" (row) axis first.
array([[0, 6],
	   [1, 7]])
*****
diagflat(v, k=0):
Create a two-dimensional array with the flattened input as a diagonal.
例1:
>>> np.diagflat([[1,2], [3,4]])
array([[1, 0, 0, 0],
       [0, 2, 0, 0],
       [0, 0, 3, 0],
       [0, 0, 0, 4]])

>>> np.diagflat([1,2], 1)
array([[0, 1, 0],
       [0, 0, 2],
       [0, 0, 0]])
*****
trace(a, offset=0, axis1=0, axis2=1, dtype=None, out=None):
Return the sum along diagonals of the array.  the sum of elements ``a[i,i+offset]``
axis1、axis2: 从n-dim中选出2个维度
返回值: If `a` is 2-D, the sum along the diagonal is returned.
        If `a` has larger dimensions, then an array of sums along diagonals is returned.
例1:
a = np.arange(8).reshape((2,2,2))
print(a)
print(np.trace(a))  # [6 8], 默认使用前2个维度
例2:
a = np.arange(24).reshape((2,2,2,3))
print(np.trace(a))
# [[18 20 22]
#  [24 26 28]]


# 相关系数先跳过...
corrcoef(x, y=None, rowvar=True):
Return Pearson product-moment correlation coefficients.  皮尔逊积差相关系数
x: A 1-D or 2-D array containing multiple variables and observations. 行表示variables, 列表示observations
y: An additional set of variables and observations. `y` has the same shape as `x`.
rowvar: 默认为True时, 行表示variables, 列表示observations; 否则列表示variables, 行表示observations


# np.cross & np.inner & np.outer & np.dot & np.prod
cross(a, b, axisa=-1, axisb=-1, axisc=-1, axis=None):
Return the cross product of two (arrays of) vectors.  向量积, 也叫叉积(交叉相乘), 外积
The cross product of `a` and `b` is a vector perpendicular to both `a` and `b`.  向量积的性质
the direction of the cross product vector is defined by the `right-hand rule`.
axisc: Axis of `c` containing the cross product vector(s).
       Ignored if both input vectors have dimension 2, as the return is scalar.
例1:
Vector cross-product.
>>> x = [1, 2, 3]
>>> y = [4, 5, 6]
>>> np.cross(x, y)
array([-3,  6, -3])

One vector with dimension 2.
>>> x = [1, 2]
>>> y = [4, 5, 6]
>>> np.cross(x, y)
array([12, -6, -3])

Equivalently:
>>> x = [1, 2, 0]  # 填充0
>>> y = [4, 5, 6]
>>> np.cross(x, y)
array([12, -6, -3])

Both vectors with dimension 2.
>>> x = [1,2]
>>> y = [4,5]
>>> np.cross(x, y)
-3  # 二维时结果为scalar
例2:
Multiple vector cross-products.
>>> x = np.array([[1,2,3], [4,5,6]])
>>> y = np.array([[4,5,6], [1,2,3]])
>>> np.cross(x, y)
array([[-3,  6, -3],
	   [ 3, -6,  3]])

The orientation of `c` can be changed using the `axisc` keyword.
>>> np.cross(x, y, axisc=0)  # 对结果转置
array([[-3,  3],
	   [ 6, -6],
	   [-3,  3]])
例3:
Change the vector definition of `x` and `y` using `axisa` and `axisb`.
>>> x = np.array([[1,2,3], [4,5,6], [7, 8, 9]])
>>> y = np.array([[7, 8, 9], [4,5,6], [1,2,3]])
>>> np.cross(x, y)
array([[ -6,  12,  -6],
	   [  0,   0,   0],
	   [  6, -12,   6]])
>>> np.cross(x, y, axisa=0, axisb=0)
array([[-24,  48, -24],
	   [-30,  60, -30],
	   [-36,  72, -36]])
*****
inner(a, b):
Inner product of two arrays.  数量积, 内积, 点积
a、b: If `a` and `b` are nonscalar, their last dimensions must match.
`out.shape = a.shape[:-1] + b.shape[:-1]`
例1:
A multidimensional example:
>>> a = np.arange(24).reshape((2,3,4))
>>> b = np.arange(4)
>>> np.inner(a, b)
array([[ 14,  38,  62],
	   [ 86, 110, 134]])
例2:
An example where `b` is a scalar:
>>> np.inner(np.eye(2), 7)  # 这个要注意一下哦!!
array([[ 7.,  0.],
	   [ 0.,  7.]])
例3:
print(np.inner(6, 7))  # 42
*****
outer(a, b, out=None):
Compute the outer product of two vectors.
    Given two vectors, 
	``a = [a0, a1, ..., aM]`` and
    ``b = [b0, b1, ..., bN]``,
    the outer product [1]_ is::

      [[a0*b0  a0*b1 ... a0*bN ]
       [a1*b0    .
       [ ...          .
       [aM*b0            aM*bN ]]
a、b: Input is flattened if not already 1-dimensional.
返回值: ``out[i, j] = a[i] * b[j]``
例1:
提到了mandelbrot集合
例2:
An example using a "vector" of letters:
>>> x = np.array(['a', 'b', 'c'], dtype=object)
>>> np.outer(x, [1, 2, 3])
array([[a, aa, aaa],
	   [b, bb, bbb],
	   [c, cc, ccc]], dtype=object)
*****
dot(a, b, out=None):
Dot product of two arrays. Specifically,
	- If both `a` and `b` are 1-D arrays, it is inner product of vectors
	  (without complex conjugation).
        >>> np.dot([2j, 3j], [2j, 3j])
        (-13+0j)

	- If both `a` and `b` are 2-D arrays, it is matrix multiplication,
	  but using :func:`matmul` or ``a @ b`` is preferred.
	    >>> a = [[1, 0], [0, 1]]
        >>> b = [[4, 1], [2, 2]]
        >>> np.dot(a, b)
        array([[4, 1],
               [2, 2]])

	- If either `a` or `b` is 0-D (scalar), it is equivalent to :func:`multiply`
	  and using ``numpy.multiply(a, b)`` or ``a * b`` is preferred.
		>>> np.dot(3, 4)
		12

	- If `a` is an N-D array and `b` is a 1-D array, it is a sum product over
	  the last axis of `a` and `b`.

	- If `a` is an N-D array and `b` is an M-D array (where ``M>=2``), it is a
	  sum product over the last axis of `a` and the second-to-last axis of `b`::

		dot(a, b)[i,j,k,m] = sum(a[i,j,:] * b[k,:,m])
		
			>>> a = np.arange(3*4*5*6).reshape((3,4,5,6))
			>>> b = np.arange(3*4*5*6)[::-1].reshape((5,4,6,3))
			>>> np.dot(a, b)[2,3,2,1,2,2]
			499128
			>>> sum(a[2,3,2,:] * b[1,2,:,2])
			499128
*****
prod(a, axis=None, dtype=None, out=None, keepdims=np._NoValue, initial=np._NoValue):
Return the product of array elements over a given axis.
initial : scalar, The starting value for this product.
例1:
The product of an empty array is the neutral element 1:
print(np.prod([]))  # 1.0
例2:
print(np.prod([1, 2], initial=5))  # 10  有初始值

小结:
	np.cross: 交叉求差
	np.inner: 对应求和

cumprod(a, axis=None, dtype=None, out=None):
Return the cumulative product of elements along a given axis.  # 累积的积


cumsum(a, axis=None, dtype=None, out=None):
Return the cumulative sum of the elements along a given axis.  # 累积的和


diff(a, n=1, axis=-1):
Calculate the n-th discrete difference along the given axis.  # n阶离散差分
``out[n] = a[n+1] - a[n]``  # 后面一个数减去前面一个数(使用的是前向差分)
n: The number of times values are differenced. 
   If zero, the input is returned as-is.
例1:
>>> x = np.array([1, 2, 4, 7, 0])
>>> np.diff(x)
array([ 1,  2,  3, -7])
>>> np.diff(x, n=2)
array([  1,   1, -10])  # 2阶
例2:
>>> x = np.arange('1066-10-13', '1066-10-16', dtype=np.datetime64)
>>> np.diff(x)
array([1, 1], dtype='timedelta64[D]')
例3:
无符号整型...??


gradient(f, *varargs, **kwargs):
求梯度
The gradient is computed using second order accurate central differences in the interior points and either first or second order accurate one-sides(forward or backwards) differences at the boundaries.
上面这一句的意思是数组里面的点使用二阶中心差分, 数组边界的两个点使用一阶/二阶的前向/后向差分.
The returned gradient hence has the same shape as the input array.
varargs : list of scalar or array, optional
	Spacing between f values. Default unitary spacing for all dimensions.  # 默认两个数之间的空间为一个单位
	Spacing can be specified using:

	1. single scalar to specify a sample distance for all dimensions.  # 默认为1时除以2, 为2时除以2*2, 为3时除以3*2...
	2. N scalars to specify a constant sample distance for each dimension.
	   i.e. `dx`, `dy`, `dz`, ...
	3. N arrays to specify the coordinates of the values along each
	   dimension of F. The length of the array must match the size of
	   the corresponding dimension
	4. Any combination of N scalars/arrays with the meaning of 2. and 3.

	If `axis` is given, the number of varargs must equal the number of axes.
	Default: 1.

例1:
>>> f = np.array([1, 2, 4, 7, 11, 16], dtype=float)
>>> np.gradient(f)
array([ 1. ,  1.5,  2.5,  3.5,  4.5,  5. ])
>>> np.gradient(f, 2)
array([ 0.5 ,  0.75,  1.25,  1.75,  2.25,  2.5 ])  # 间隔2个单位, 除以4
>>> np.gradient(f, 3)
[0.33333333, 0.5, 0.83333333, 1.16666667, 1.5, 1.66666667]  # 间隔3个单位, 除以6
例2:
For instance a uniform spacing:
	>>> x = np.arange(f.size)
	>>> np.gradient(f, x)
	array([ 1. ,  1.5,  2.5,  3.5,  4.5,  5. ])

Or a non uniform one:
	>>> x = np.array([0., 1., 1.5, 3.5, 4., 6.], dtype=float)
	>>> np.gradient(f, x)
	array([ 1. ,  3. ,  3.5,  6.7,  6.9,  2.5])  # 看来很长时间都没搞明白??
例3:
For two dimensional arrays, the return will be two arrays ordered by axis. 
In this example the first array stands for the gradient in rows and the second one in columns direction:
>>> np.gradient(np.array([[1, 2, 6], 
                          [3, 4, 5]], dtype=float))
[array([[ 2.,  2., -1.],
		[ 2.,  2., -1.]]), 
 array([[ 1. ,  2.5,  4. ],
		[ 1. ,  1. ,  1. ]])]
例4:
In this example the spacing is also specified:
uniform for axis=0 and non uniform for axis=1
>>> dx = 2.
>>> y = [1., 1.5, 3.5]
>>> np.gradient(np.array([[1, 2, 6], 
                          [3, 4, 5]], dtype=float), dx, y)
[array([[ 1. ,  1. , -0.5],
		[ 1. ,  1. , -0.5]]), 
 array([[ 2. ,  2. ,  2. ],
		[ 2. ,  1.7,  0.5]])]
放弃, 爱他妈咋地咋地吧...


# np.median & np.nanmedian
median(a, axis=None, out=None, overwrite_input=False, keepdims=False):
overwrite_input: If True, then allow use of memory of input array `a` for calculations. The input array will be modified by the call to `median`.
返回值:If the input contains integers or floats smaller than ``float64``, then the output data-type is ``np.float64``.  Otherwise, the data-type of the output is the same as that of the input.


# np.percentile & np.quantile & np.nanquantile & np.nanpercentile
q的取值范围不同
percentile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=False):
百分位数
q: 0~100
interpolation : {'linear', 'lower', 'higher', 'midpoint', 'nearest'}
	This optional parameter specifies the interpolation method to use when the desired percentile lies between two data points ``i < j``:

	* 'linear': ``i + (j - i) * fraction``, where ``fraction`` is the fractional part of the index surrounded by ``i`` and ``j``.
	* 'lower': ``i``.
	* 'higher': ``j``.
	* 'nearest': ``i`` or ``j``, whichever is nearest.
	* 'midpoint': ``(i + j) / 2``.
例1:
a = np.array([[10, 7, 4], [3, 2, 1]])
print(np.percentile(a, 50, axis=1).dtype)  # float64
例2:
a = np.arange(6)
print(a)
print(np.percentile(a, 51, interpolation='linear'))  # 2.55
#  2  2.5  3
# 40  50  60
# 11/20 + 2
print(np.percentile(a, 51, interpolation='midpoint'))  # 2.5
*****
quantile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=False):
q: 0~1
例1:
a = np.array([[10, 7, 4], [3, 2, 1]])
print(np.quantile(a, 0.5, axis=1).dtype)  # float64
*****
nanquantile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=np._NoValue):
忽略nan的影响
例1:
>>> a = np.array([[10., 7., 4.], [3., 2., 1.]])
>>> a[0][1] = np.nan
>>> a
array([[ 10.,  nan,   4.],
	  [  3.,   2.,   1.]])
>>> np.quantile(a, 0.5)
nan
>>> np.nanquantile(a, 0.5)
3.5
例2:
>>> np.nanquantile(a, 0.5, axis=0)
array([ 6.5,  2.,   2.5])
>>> np.nanquantile(a, 0.5, axis=1, keepdims=True)
array([[ 7.],
	   [ 2.]])


# np.nonzero & np.flatnonzero & np.count_nonzero
nonzero(a):
Return the indices of the elements that are non-zero.
Returns a tuple of arrays, one for each dimension of `a`.
The corresponding non-zero values can be obtained with::
    a[nonzero(a)]
To group the indices by element, rather than dimension, use::
	transpose(nonzero(a))
例1:
>>> x = np.array([[1,0,0], [0,2,0], [1,1,0]])
>>> x
array([[1, 0, 0],
	   [0, 2, 0],
	   [1, 1, 0]])
>>> np.nonzero(x)
(array([0, 1, 2, 2]), array([0, 1, 0, 1]))
例2:
>>> x[np.nonzero(x)]
array([1, 2, 1, 1])
例3:
>>> np.transpose(np.nonzero(x))
array([[0, 0],
	   [1, 1],
	   [2, 0],
	   [2, 1])
例4:
A common use for ``nonzero`` is to find the indices of an array, where a condition is True.
Given an array `a`, the condition `a` > 3 is a boolean array and since False is interpreted as 0, 
np.nonzero(a > 3) yields the indices of the `a` where the condition is true.
>>> a = np.array([[1,2,3],[4,5,6],[7,8,9]])
>>> a > 3
array([[False, False, False],
	   [ True,  True,  True],
	   [ True,  True,  True]])
>>> np.nonzero(a > 3)
(array([1, 1, 1, 2, 2, 2]), array([0, 1, 2, 0, 1, 2]))
例5:
The ``nonzero`` method of the boolean array can also be called.
>>> (a > 3).nonzero()
(array([1, 1, 1, 2, 2, 2]), array([0, 1, 2, 0, 1, 2]))
*****
flatnonzero(a):
调用``return np.nonzero(np.ravel(a))[0]``
Return indices that are non-zero in the flattened version of a.
>>> x = np.arange(-2, 3)
>>> x
array([-2, -1,  0,  1,  2])
>>> np.flatnonzero(x)
array([0, 1, 3, 4])

Use the indices of the non-zero elements as an index array to extract
these elements:
>>> x.ravel()[np.flatnonzero(x)]
array([-2, -1,  1,  2])
*****
count_nonzero(a, axis=None):
计数



std(a, axis=None, dtype=None, out=None, ddof=0, keepdims=np._NoValue):
标准差
ddof : int
       Means Delta Degrees of Freedom.  The divisor used in calculations is ``N - ddof``, where ``N`` represents the number of elements.
       By default `ddof` is zero.
``std = sqrt(mean(abs(x - x.mean())**2))``

The average squared deviation(均方误差) is normally calculated as ``x.sum() / N``, where ``N = len(x)``.  
If, however, `ddof` is specified, the divisor ``N - ddof`` is used instead. 
In standard statistical practice, ``ddof=1`` provides an unbiased estimator(无偏估计) of the variance of the infinite population(总体). 
``ddof=0`` provides a maximum likelihood estimate(最大似然估计) of the variance for normally distributed variables. 
The standard deviation computed in this function is the square root of the estimated variance, so even with ``ddof=1``, it will not be an unbiased estimate of the standard deviation per se.


Note that, for complex numbers, `std` takes the absolute value before squaring, so that the result is always real and nonnegative.




















































































































# strides
>>> y = np.reshape(np.arange(2*3*4), (2,3,4))
>>> y
array([[[ 0,  1,  2,  3],
		[ 4,  5,  6,  7],
		[ 8,  9, 10, 11]],
	   [[12, 13, 14, 15],
		[16, 17, 18, 19],
		[20, 21, 22, 23]]])
>>> y.strides
(48, 16, 4)  # (12,4,1)
>>> y[1,1,1]
17
>>> offset=sum(y.strides * np.array((1,1,1)))
>>> offset/y.itemsize
17

>>> x = np.reshape(np.arange(5*6*7*8), (5,6,7,8)).transpose(2,3,1,0)  # 转置为(7,8,6,5)
>>> x.strides
(32, 4, 224, 1344)
>>> i = np.array([3,5,2,2])
>>> offset = sum(i * x.strides)
>>> x[3,5,2,2]
813
>>> offset / x.itemsize
813"""


# column_stack, newaxis
>>> from numpy import newaxis
>>> np.column_stack((a,b))     # with 2D arrays
array([[ 8.,  8.,  1.,  8.],
       [ 0.,  0.,  0.,  4.]])
>>> a = np.array([4.,2.])
>>> b = np.array([3.,8.])
>>> np.column_stack((a,b))     # returns a 2D array
array([[ 4., 3.],
       [ 2., 8.]])
>>> np.hstack((a,b))           # the result is different
array([ 4., 2., 3., 8.])
>>> a[:,newaxis]               # this allows to have a 2D columns vector
array([[ 4.],
       [ 2.]])
>>> np.column_stack((a[:,newaxis],b[:,newaxis]))
array([[ 4.,  3.],
       [ 2.,  8.]])
>>> np.hstack((a[:,newaxis],b[:,newaxis]))   # the result is the same
array([[ 4.,  3.],
       [ 2.,  8.]])

np.split
np.hsplit
np.vsplit
np.array_split
# np.split & np.array_split的关系,
当indices_or_sections为序列时, 二者一样; 当indices_or_sections为num时, np.split要求等分
=====
def split(ary,indices_or_sections,axis=0):
    try:
        len(indices_or_sections)  # 只要是序列就不会报错
    except TypeError:
        sections = indices_or_sections
        N = ary.shape[axis]
        if N % sections:
            raise ValueError(
                'array split does not result in an equal division')
    res = array_split(ary, indices_or_sections, axis)
    return res
=====


# view(shallow copy, 共享data) & copy(deep copy)
>>> c = a.view()  # 一个数组可分为3个基本属性:id、data、shape
>>> c is a
False
>>> c.base is a  # c is a view of the data owned by a
True
>>> s = a[ : , 1:3]

d = a.copy()
b = a[:100].copy()


# argmax & max
print(data.argmax(axis=0))  # 返回索引
print(data.max(axis=0))     # 返回数值


怎么不elementwise??
np.all(data_max == data.max(axis=0))


布尔值索引,
a = np.arange(12).reshape(3, 4)
print(a)
b1 = np.array([False, True, True])
b2 = np.array([True, False, True, False])
print(a[b1, b2])  # [ 4 10]  搞不懂??


# np._ix 网格, 不同shape的加法体现了broadcast原则
=====
>>> a = np.array([2,3,4,5])
>>> b = np.array([8,5,4])
>>> c = np.array([5,4,6,8,3])
>>> ax,bx,cx = np.ix_(a,b,c)
>>> ax
array([[[2]],
       [[3]],
       [[4]],
       [[5]]])
>>> bx
array([[[8],
        [5],
        [4]]])
>>> cx
array([[[5, 4, 6, 8, 3]]])
>>> ax.shape, bx.shape, cx.shape
((4, 1, 1), (1, 3, 1), (1, 1, 5))
>>> result = ax+bx*cx  # ax当作第1维度, bx当作第2维度, cx当作第3维度
>>> result
array([[[42, 34, 50, 66, 26],
        [27, 22, 32, 42, 17],
        [22, 18, 26, 34, 14]],
       [[43, 35, 51, 67, 27],
        [28, 23, 33, 43, 18],
        [23, 19, 27, 35, 15]],
       [[44, 36, 52, 68, 28],
        [29, 24, 34, 44, 19],
        [24, 20, 28, 36, 16]],
       [[45, 37, 53, 69, 29],
        [30, 25, 35, 45, 20],
        [25, 21, 29, 37, 17]]])
=====